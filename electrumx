#!/bin/bash
##
## electrumx commandline client
##

ELECTRUMX_DEFAULT_HOSTS=("electrum.vrsc.0x03.services")
ELECTRUMX_DEFAULT_PORT="17486"

ELECTRUMX_CLIENT_NAME="electrumx-cli"
ELECTRUMX_PROTOCOL_VERSION="1.4"

# ssl defaults
USE_SSL=1
SSL_VERIFY=1

# default timeouts
SUBSCRIBE_TIMEOUT=600
REQUEST_TIMEOUT=1

# if there's a ${T} variable set, use that as timeout.
test ! -z "${T}" && SUBSCRIBE_TIMEOUT="${T}"
test ! -z "${T}" && REQUEST_TIMEOUT="${T}"

# if SSL and/or SSL_VERIFY is specified, use passed valued
test ! -z "${S}" && USE_SSL=${S}
test ! -z "${V}" && SSL_VERIFY=${V}

if [ -f "./bitcoin-bash-tools/bitcoin.sh" ]; then
    . ./bitcoin-bash-tools/bitcoin.sh
else
    echo "\"bitcoin-bash-tools\" not found"
    echo "try: git submodule init && git submodule update"
    exit
fi

# try to find ncat on the system, exit if not.
NCAT=$(which ncat)
test -z "${NCAT}" && {
    echo "\"ncat\" not found or not in \$PATH"; ech
    echo "try: sudo apt install nmap"
    exit
}

# try to find jq on the system, exit if not.
JQ=$(which jq)
test -z "${JQ}" && {
    echo "\"jq\" not found or not in \$PATH"
    echo "try: sudo apt install jq"
    exit
}
JQ_OPTS="-Mr"

# try to find bc on the system, exit if not
BC=$(which bc)
test -z "${BC}" && {
    echo "\"bc\" not found or not in \$PATH"
    echo "try: sudo apt install bc"
    exit
}

# try to find bc on the system, exit if not
DC=$(which dc)
test -z "${DC}"  && {
    echo "\"dc\" not found or not in \$PATH"
    echo "try: sudo apt install dc"
    exit
}

# try to find xxd on the system, exit if not
XXD=$(which xxd)
test -z "${XXD}"  && {
    echo "\"xxd\" not found or not in \$PATH"
    echo "try: sudo apt install xxd"
    exit
}

# try to find xargs on the system, exit if not
XARGS=$(which xargs)
test -z "${XARGS}"  && {
    echo "\"xargs\" not found or not in \$PATH"
    echo "try: sudo apt install findutils"
    exit
}

# try to find cut, sha256sum, sleep and tac (all from coreutils, thus checking only one) on the system, exit if not
CUT=$(which cut)
SHA256SUM=$(which sha256sum)
SLEEP=$(which sleep)
TAC=$(which tac)
test -z "${TAC}"  && {
    echo "\"tac\" not found or not in \$PATH"
    echo "try: sudo apt install coreutils"
    exit
}

# if theres a host set via environment variable H
if [ ! -z "${H}" ]; then
    # then use it
    ELECTRUMX_HOST="${H}"
else
    # otherwise select a random host from the ELECTRUMX_DEFAULT_HOSTS list above
    ELECTRUMX_HOST="${ELECTRUMX_DEFAULT_HOSTS[$RANDOM % ${#ELECTRUMX_DEFAULT_HOSTS[*]}]}"
fi

# if there is a port specified via environment variable P and it's numeric, use it
case ${P} in
    # empty or non-numeric, use default
    ''|*[!0-9]*)
        ELECTRUMX_PORT="${ELECTRUMX_DEFAULT_PORT}"
    ;;
    *)
        # numeric, use passed value
        ELECTRUMX_PORT="${P}"
    ;;
esac

# position of module name in parameter list
MODULE="${1}"
# position of command specification in parameter list
COMMAND="${2}"

#
# calculate scripthash from address
#

_scripthash(){
    local scriptpubkey;
    local decode=$(decodeBase58 "${1}")
    case "${1::1}" in
        "b")
            scriptpubkey=$(_scriptpubkey_p2sh    "${decode}")
            ;;
        "i")
            scriptpubkey=$(_scriptpubkey_verusid "${decode}")
            ;;
        *)
            scriptpubkey=$(_scriptpubkey_p2pkh   "${decode}")
            ;;
    esac
    echo ${scriptpubkey} | ${XXD} -r -p | ${SHA256SUM} -b | ${CUT} -f1 | ${CUT} -d" " -f1 | ${TAC} -rs .. | ${XARGS} echo
}

#
# calculate scriptPubKey from P2PKH, P2SH, VerusID
#

# https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/src/payments/p2pkh.js#L55
_scriptpubkey_p2pkh(){
    local P2PKH="76A914${1:2:-8}88AC"
    echo ${P2PKH};
}

# https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/src/payments/p2sh.js#L116
_scriptpubkey_p2sh(){
    local P2SH="A914${1:2:-8}87"
    echo ${P2SH};
}

_scriptpubkey_verusid(){
    local VERUSID="050403000000CC1B04030001011504${1:2:-8}75"
    echo ${VERUSID};
}

#
# request data from electrumx
# ${1}: operation read timeout
# ${2}: method to execute 
# ${3}..${N}: additional parameters
#
function _request(){
    local TIMEOUT="${1}"
    shift 1
    # save the first param which in the beginning is the method to execute
    local METHOD="${1}"
    # remove it from the argument list
    shift 1

    # if there are still arguments left, 
    if [ $# -ge 1 ]; then 
        # start constructing 'params'
       local  PARAMS=",\"params\":["
        # while there are still arguments left
        while [ $# -ge 1 ]; do
            # add argument to 'params'
            PARAMS="${PARAMS}${1},"
            # remove argument from argument list
            shift
        done
        # since a PARAM will end in a , and that is bad for json, we'll remove
        # the last character from PARAMS and then close the array with a ]
        PARAMS="${PARAMS::-1}]"
    fi

    # output debug info to STDERR if ${D} is set
    test ! -z "${D}" && >&2 echo "DEBUG: ${TIMEOUT} ${METHOD} ${PARAMS:1}"

    # check if ssl is asked
    if [ ${USE_SSL} -eq 1 ]; then
        NCAT_SSL="--ssl"
        if [ ${SSL_VERIFY} -eq 1 ]; then
            NCAT_SSL="${NCAT_SSL} --ssl-verify"
        fi
    fi

    # request whatever has been prepared, with or without params.
    (echo "{\"id\": 1, \"method\": \"${METHOD}\"${PARAMS}}"; ${SLEEP} ${TIMEOUT}) | ${NCAT} ${NCAT_SSL} ${ELECTRUMX_HOST} ${ELECTRUMX_PORT}
}

#
# blockchain: chain_
#

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#blockchain-block-header
# ${1}: height
function chain_header(){
    _request "${REQUEST_TIMEOUT}" "blockchain.block.header" "${1}" | ${JQ} ${JQ_OPTS} .result
}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#blockchain-block-headers
# ${1}: height
# ${2}: number
function chain_headers(){
    _request "${REQUEST_TIMEOUT}" "blockchain.block.headers" "${1}" "${2}" | ${JQ} ${JQ_OPTS} .result

}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#blockchain-estimatefee
# ${1}: target confirmations
function chain_estimatefee(){
    _request "${REQUEST_TIMEOUT}" "blockchain.estimatefee" "${1}" | ${JQ} ${JQ_OPTS} .result
}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#blockchain-relayfee
function chain_relayfee(){
    printf "%.8f\n" $(_request "${REQUEST_TIMEOUT}" "blockchain.relayfee" | ${JQ} ${JQ_OPTS} .result)
}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#blockchain-headers-subscribe
# ${1}: duration in seconds, default 60
function chain_subscribe(){
    _request "${SUBSCRIBE_TIMEOUT}" "blockchain.headers.subscribe" | ${JQ} ${JQ_OPTS} ".result // .params"
}

# this just is 'blockchain.headers.subscribe' with a really short duration and a jq filter
function chain_height(){
    _request "${REQUEST_TIMEOUT}" "blockchain.headers.subscribe" | ${JQ} ${JQ_OPTS} .result.height
}

#
# blockchain.scripthash: addr_
#

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#blockchain-scripthash-get-balance
# ${1}: address
function addr_balance(){
	SCRIPTHASH=$(_scripthash ${1})
    RESULT=$(_request "${REQUEST_TIMEOUT}" "blockchain.scripthash.get_balance" "\"${SCRIPTHASH}\"" | ${JQ} ${JQ_OPTS} .result.confirmed)
    echo "scale=8; ${RESULT}/100000000" | ${BC}
}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#blockchain-scripthash-get-history
# ${1}: address
function addr_history(){
	SCRIPTHASH=$(_scripthash ${1})
    _request "${REQUEST_TIMEOUT}" "blockchain.scripthash.get_history" "\"${SCRIPTHASH}\"" | ${JQ} ${JQ_OPTS} .result
}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#blockchain-scripthash-get-mempool
# ${1}: address
function addr_mempool(){
	SCRIPTHASH=$(_scripthash ${1})
    _request "${REQUEST_TIMEOUT}" "blockchain.scripthash.get_mempool" "\"${SCRIPTHASH}\"" | ${JQ} ${JQ_OPTS} .result
}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#blockchain-scripthash-listunspent
# ${1}: address
function addr_unspent(){
	SCRIPTHASH=$(_scripthash ${1})
    _request "${REQUEST_TIMEOUT}" "blockchain.scripthash.listunspent" "\"${SCRIPTHASH}\"" | ${JQ} ${JQ_OPTS} .result
}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#blockchain-scripthash-subscribe
# ${1}: duration
# ${2}: address
function addr_subscribe(){
    SCRIPTHASH=$(_scripthash ${1})
    _request "${SUBSCRIBE_TIMEOUT}" "blockchain.scripthash.subscribe" "\"${SCRIPTHASH}\"" | ${JQ} ${JQ_OPTS} '.result // .params[1]// .error'
}

#
# blockchain.transaction: tx_
#

# todo: blockchain.transaction.broadcast
# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#blockchain-transaction-broadcast

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#blockchain-transaction-get
# 1: txid
# 2: verbose flag (hardcoded)
function tx_get(){
    _request "${REQUEST_TIMEOUT}" "blockchain.transaction.get" "\"${1}\"" "1" | ${JQ} ${JQ_OPTS} .result
}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#blockchain-transaction-id-from-pos
# 1: height
# 2: pos
# 3: get response with merkle root (hardcoded)
function tx_get_pos(){
    _request "${REQUEST_TIMEOUT}" "blockchain.transaction.id_from_pos" "${1}" "${2}" $(printf %.0f 1) | ${JQ} ${JQ_OPTS} .result
}

#
# mempool
#

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#mempool-get-fee-histogram
function mempool_get_fh(){
    _request "${REQUEST_TIMEOUT}" "mempool.get_fee_histogram" | ${JQ} ${JQ_OPTS} .result
}

#
# server: srv_
#

# todo: server.add_peer
# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#server-add-peer


# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#server-banner
function srv_banner(){
    _request "${REQUEST_TIMEOUT}" "server.banner" | ${JQ} ${JQ_OPTS} .result
}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#server-donation-address
function srv_donations(){
    _request "${REQUEST_TIMEOUT}" "server.donation_address" | ${JQ} ${JQ_OPTS} .result
}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#server-features
function srv_features(){
    _request "${REQUEST_TIMEOUT}" "server.features" | ${JQ} ${JQ_OPTS} .result
}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#server.peers.subscribe
function srv_peers(){
    _request "${REQUEST_TIMEOUT}" "server.peers.subscribe" | ${JQ} ${JQ_OPTS} .result
}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#server-ping
function srv_ping(){
    REPLY=$(_request "${REQUEST_TIMEOUT}" "server.ping" "\"${ELECTRUMX_CLIENT_NAME}\"" "\"${ELECTRUMX_PROTOCOL_VERSION}\"" | ${JQ} ${JQ_OPTS} .result)
    if [ "${REPLY}" == "null" ]; then
        echo pong!
    fi
}

# https://electrumx.readthedocs.io/en/latest/protocol-methods.html#server-version
function srv_version(){
    _request "${REQUEST_TIMEOUT}" "server.version" "\"${ELECTRUMX_CLIENT_NAME}\"" "\"${ELECTRUMX_PROTOCOL_VERSION}\"" | ${JQ} ${JQ_OPTS} .result[0]
}
function srv_protocol_version(){
    _request "${REQUEST_TIMEOUT}" "server.version" "\"${ELECTRUMX_CLIENT_NAME}\"" "\"${ELECTRUMX_PROTOCOL_VERSION}\"" | ${JQ} ${JQ_OPTS} .result[1]
}

# output debug info if requested. execute.
# output debug info if requested. execute.
test ! -z "${D}" && (
    if [ ${USE_SSL} -eq 1 ]; then
        SCHEME="ssl"
    else
        SCHEME="tcp"
    fi
    >&2 echo "DEBUG: using ${SCHEME}://${ELECTRUMX_HOST}:${ELECTRUMX_PORT}"
)
${MODULE}_${COMMAND} "${3}" "${4}" "${5}"

# EOF
